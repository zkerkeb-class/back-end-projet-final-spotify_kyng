const roomService = require('../services/roomService');
const logger = require('../utils/logger');

// ðŸ“Œ CrÃ©ation d'une nouvelle salle
const createRoom = async (req, res) => {
  try {
    logger.info('CrÃ©ation dâ€™une nouvelle salle...');
    const room = await roomService.createRoom(req.body.currentTrackId);
    logger.info(`Salle crÃ©Ã©e: ${room.id}`);
    res.status(201).json(room);
  } catch (error) {
    logger.error(`Erreur lors de la crÃ©ation dâ€™une salle: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ðŸ“Œ RÃ©cupÃ©rer une salle par ID
const getRoom = async (req, res) => {
  try {
    const { roomId } = req.params;
    logger.info(`RÃ©cupÃ©ration des infos de la salle ${roomId}`);
    const room = await roomService.getRoom(roomId);
    res.status(200).json(room);
  } catch (error) {
    logger.warn(`Salle non trouvÃ©e: ${req.params.roomId}`);
    res.status(404).json({ error: error.message });
  }
};

// ðŸ“Œ RÃ©cupÃ©rer l'Ã©tat de la salle et des participants
const getRoomState = async (req, res) => {
  try {
    const { roomId } = req.params;
    logger.info(`RÃ©cupÃ©ration de lâ€™Ã©tat de lecture et participants pour la salle ${roomId}`);
    const state = await roomService.getPlaybackState(roomId);
    const participants = await roomService.getParticipants(roomId);
    res.status(200).json({ state, participants });
  } catch (error) {
    logger.error(
      `Erreur lors de la rÃ©cupÃ©ration de lâ€™Ã©tat de la salle ${roomId}: ${error.message}`
    );
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// ðŸ“Œ Inviter un utilisateur Ã  rejoindre la salle via un lien
const inviteToRoom = async (req, res) => {
  try {
    const { roomId, userId } = req.params; // inviteUrl est l'URL d'invitation, userId est l'ID de l'utilisateur
    logger.info(`Tentative dâ€™inviter lâ€™utilisateur ${userId} Ã  rejoindre la salle via ${roomId}`);

    const result = await roomService.inviteToRoom(roomId, userId);
    res.status(200).json(result);
  } catch (error) {
    logger.error(
      `Erreur lors de lâ€™invitation de lâ€™utilisateur ${userId} Ã  rejoindre la salle: ${error.message}`
    );
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

module.exports = {
  createRoom,
  getRoom,
  getRoomState,
  inviteToRoom,
};
